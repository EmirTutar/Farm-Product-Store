import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.app.fileHandling.open.OpenAbstract;
import org.app.fileHandling.open.OpenBinBehavior;
import org.app.fileHandling.open.OpenCsvBehavior;
import org.app.validation.ioExceptions.InvalidTypeException;

import java.io.File;
import java.util.ArrayList;

public class FHOpenTest {

    private OpenCsvBehavior<Object> openCsvBehavior;
    private OpenBinBehavior<Object> openBinBehavior;
    private File testCsvFile;
    private File testBinFile;

    // Dummy-Implementierung der OpenAbstract zum Testen
    private static class OpenAbstractImpl<T> extends OpenAbstract<T> {
        @Override
        public ArrayList<T> read(File file) throws InvalidTypeException {
            if (!file.exists()) {
                throw new InvalidTypeException("File not found.");
            }
            // Simuliert das Lesen eines Files und das Hinzuf√ºgen von Elementen zu einer Liste
            return new ArrayList<>();
        }
    }

    @BeforeEach
    public void setUp() {
        openCsvBehavior = new OpenCsvBehavior<>();
        openBinBehavior = new OpenBinBehavior<>();
        testCsvFile = new File("src/test/testFiles/OpenCsvBehaviorTestFile.csv"); // Ensure this test file exists and is formatted correctly
        testBinFile = new File("src/test/testFiles/OpenBinBehaviorTestFile.bin"); // Ensure this test file exists and is formatted correctly
    }

    @Test
    public void testReadValidCsvFile() throws InvalidTypeException {
        ArrayList<Object> result = openCsvBehavior.read(testCsvFile);
        assertNotNull(result);
        assertFalse(result.isEmpty());
    }

    @Test
    public void testReadEmptyCsvFile() {
        File emptyFile = new File("src/test/testFiles/OpenCsvBehaviorTestemptyFile.csv");
        assertThrows(InvalidTypeException.class, () -> openCsvBehavior.read(emptyFile));
    }

    @Test
    public void testReadValidBinFile() {
        ArrayList<Object> result = openBinBehavior.read(testBinFile);
        assertNotNull(result);
    }

    @Test
    public void testReadInvalidBinFile() {
        File invalidFile = new File("invalid_path.bin");
        ArrayList<Object> result = openBinBehavior.read(invalidFile);
        assertTrue(result.isEmpty());
    }

    @Test
    public void testReadWithNonExistentFile() {
        OpenAbstractImpl<Object> openAbstractImpl = new OpenAbstractImpl<>();
        File nonExistentFile = new File("does_not_exist.txt");
        assertThrows(InvalidTypeException.class, () -> openAbstractImpl.read(nonExistentFile));
    }

    @Test
    public void testReadWithValidFile() {
        OpenAbstractImpl<Object> openAbstractImpl = new OpenAbstractImpl<>();
        File existentFile = new File("src/test/testFiles/OpenAbstractTestFile");  // Ensure this file exists in the test directory.
        assertDoesNotThrow(() -> {
            ArrayList<Object> result = openAbstractImpl.read(existentFile);
            assertNotNull(result);
        });
    }
}
